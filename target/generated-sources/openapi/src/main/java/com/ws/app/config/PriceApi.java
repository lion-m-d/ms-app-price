/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ws.app.config;

import com.ws.app.model.PriceResponse;
import com.ws.app.model.PricesResponse;
import com.ws.app.model.RequestPriceFilter;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "Price", description = "the Price API")
public interface PriceApi {

    /**
     * GET /price/all : Obtener los precios y productos
     * Obtener los precios y productos
     *
     * @return Successful operation (status code 200)
     *         or Invalid request (status code 400)
     *         or Not Content (status code 204)
     *         or Not Found (status code 404)
     *         or Conflict (status code 409)
     */
    @ApiOperation(value = "Obtener los precios y productos", nickname = "priceAllGet", notes = "Obtener los precios y productos", response = PricesResponse.class, tags={ "Price", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = PricesResponse.class),
        @ApiResponse(code = 400, message = "Invalid request"),
        @ApiResponse(code = 204, message = "Not Content"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 409, message = "Conflict") })
    @GetMapping(
        value = "/price/all",
        produces = { "application/json" }
    )
    Mono<ResponseEntity<PricesResponse>> priceAllGet(@ApiIgnore final ServerWebExchange exchange);


    /**
     * GET /price : Obtener precio con los filtros indicados
     * Obtener precios
     *
     * @param requestPriceFilter Request Price parameters (required)
     * @return Successful operation (status code 200)
     *         or Invalid request (status code 400)
     *         or Not Content (status code 204)
     *         or Not Found (status code 404)
     *         or Conflict (status code 409)
     */
    @ApiOperation(value = "Obtener precio con los filtros indicados", nickname = "priceGet", notes = "Obtener precios", response = PriceResponse.class, tags={ "Price", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = PriceResponse.class),
        @ApiResponse(code = 400, message = "Invalid request"),
        @ApiResponse(code = 204, message = "Not Content"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 409, message = "Conflict") })
    @GetMapping(
        value = "/price",
        produces = { "application/json" }
    )
    Mono<ResponseEntity<PriceResponse>> priceGet(@NotNull @ApiParam(value = "Request Price parameters", required = true) @Valid RequestPriceFilter requestPriceFilter, @ApiIgnore final ServerWebExchange exchange);

}
